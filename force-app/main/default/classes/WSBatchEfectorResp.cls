//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class WSBatchEfectorResp {

	public class Meta {
		public Integer current_page {get;set;} 
		public Integer from_Z {get;set;} // in json: from
		public Integer last_page {get;set;} 
		public String path {get;set;} 
		public Integer per_page {get;set;} 
		public Integer to {get;set;} 
		public Integer total {get;set;} 
		public List<String> allowed_filters {get;set;} 
		public List<Allowed_sorts> allowed_sorts {get;set;} 
		public List<Allowed_sorts> allowed_appends {get;set;} 
		public List<Allowed_sorts> allowed_fields {get;set;} 
		public List<Allowed_sorts> allowed_includes {get;set;} 
		public List<Allowed_sorts> default_includes {get;set;} 
		public Optional_get_vars optional_get_vars {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'current_page') {
							current_page = parser.getIntegerValue();
						} else if (text == 'from') {
							from_Z = parser.getIntegerValue();
						} else if (text == 'last_page') {
							last_page = parser.getIntegerValue();
						} else if (text == 'path') {
							path = parser.getText();
						} else if (text == 'per_page') {
							per_page = parser.getIntegerValue();
						} else if (text == 'to') {
							to = parser.getIntegerValue();
						} else if (text == 'total') {
							total = parser.getIntegerValue();
						} else if (text == 'allowed_filters') {
							allowed_filters = arrayOfString(parser);
						} else if (text == 'allowed_sorts') {
							allowed_sorts = arrayOfAllowed_sorts(parser);
						} else if (text == 'allowed_appends') {
							allowed_appends = arrayOfAllowed_sorts(parser);
						} else if (text == 'allowed_fields') {
							allowed_fields = arrayOfAllowed_sorts(parser);
						} else if (text == 'allowed_includes') {
							allowed_includes = arrayOfAllowed_sorts(parser);
						} else if (text == 'default_includes') {
							default_includes = arrayOfAllowed_sorts(parser);
						} else if (text == 'optional_get_vars') {
							optional_get_vars = new Optional_get_vars(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Optional_get_vars {
		public List<Allowed_sorts> sortBy {get;set;} 
		public List<String> sortOrder {get;set;} 

		public Optional_get_vars(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sortBy') {
							sortBy = arrayOfAllowed_sorts(parser);
						} else if (text == 'sortOrder') {
							sortOrder = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Optional_get_vars consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Links {
		public String first {get;set;} 
		public String last {get;set;} 
		public String prev {get;set;} 
		public String next {get;set;} 

		public Links(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'first') {
							first = parser.getText();
						} else if (text == 'last') {
							last = parser.getText();
						} else if (text == 'prev') {
							prev = parser.getText();
						} else if (text == 'next') {
							next = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Links consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public String rn {get;set;} 
		public String codigo {get;set;} 
		public String nombre {get;set;} 
		public String descripcion {get;set;} 
		public String es_prestador {get;set;} 
		public String codigo_clase {get;set;} 
		public String clase {get;set;} 
		public String categoria {get;set;} 
		public String egresado {get;set;} 
		public String fecha_titulo {get;set;} 
		public String estado_civil {get;set;} 
		public String fecha_nacimiento {get;set;} 
		public String observaciones {get;set;} 
		public String estado {get;set;} 
		public String fecha_vigencia {get;set;} 
		public String cuit {get;set;} 
		public String obs_prestador {get;set;} 
		public String estado_prestador {get;set;} 
		public String fecha_vigencia_prestador {get;set;} 
		public String fecha_alta {get;set;} 
		public String fecha_baja {get;set;} 
		public String motivo_baja {get;set;} 
		public String es_profesional {get;set;} 
		public String f_modif {get;set;} 
		public String f_modif_pre {get;set;}
		public String mail {get;set;} 
		public String matricula_1 {get;set;}
		public String matricula_2 {get;set;}
		public String matricula_3 {get;set;}

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'rn') {
							rn = parser.getText();
						} else if (text == 'codigo') {
							codigo = parser.getText();
						} else if (text == 'nombre') {
							nombre = parser.getText();
						} else if (text == 'descripcion') {
							descripcion = parser.getText();
						} else if (text == 'es_prestador') {
							es_prestador = parser.getText();
						} else if (text == 'codigo_clase') {
							codigo_clase = parser.getText();
						} else if (text == 'clase') {
							clase = parser.getText();
						} else if (text == 'categoria') {
							categoria = parser.getText();
						} else if (text == 'egresado') {
							egresado = parser.getText();
						} else if (text == 'fecha_titulo') {
							fecha_titulo = parser.getText();
						} else if (text == 'estado_civil') {
							estado_civil = parser.getText();
						} else if (text == 'fecha_nacimiento') {
							fecha_nacimiento = parser.getText();
						} else if (text == 'observaciones') {
							observaciones = parser.getText();
						} else if (text == 'estado') {
							estado = parser.getText();
						} else if (text == 'fecha_vigencia') {
							fecha_vigencia = parser.getText();
						} else if (text == 'cuit') {
							cuit = parser.getText();
						} else if (text == 'obs_prestador') {
							obs_prestador = parser.getText();
						} else if (text == 'estado_prestador') {
							estado_prestador = parser.getText();
						} else if (text == 'fecha_vigencia_prestador') {
							fecha_vigencia_prestador = parser.getText();
						} else if (text == 'fecha_alta') {
							fecha_alta = parser.getText();
						} else if (text == 'fecha_baja') {
							fecha_baja = parser.getText();
						} else if (text == 'motivo_baja') {
							motivo_baja = parser.getText();
						} else if (text == 'es_profesional') {
							es_profesional = parser.getText();
						} else if (text == 'f_modif') {
							f_modif = parser.getText();
						} else if (text == 'f_modif_pre') {
							f_modif_pre = parser.getText();
						} else if (text == 'mail') {
							mail = parser.getText();
						} else if (text == 'matricula_1') {
							matricula_1 = parser.getText();
						} else if (text == 'matricula_2') {
							matricula_2 = parser.getText();
						} else if (text == 'matricula_3') {
							matricula_3 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Allowed_sorts {

		public Allowed_sorts(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Allowed_sorts consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<Data> data {get;set;} 
	public Links links {get;set;} 
	public Meta meta {get;set;} 

	public WSBatchEfectorResp(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'data') {
						data = arrayOfData(parser);
					} else if (text == 'links') {
						links = new Links(parser);
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'WSBatchEfectorResp consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static WSBatchEfectorResp parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WSBatchEfectorResp(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }


    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }


    private static List<Allowed_sorts> arrayOfAllowed_sorts(System.JSONParser p) {
        List<Allowed_sorts> res = new List<Allowed_sorts>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Allowed_sorts(p));
        }
        return res;
    }









}