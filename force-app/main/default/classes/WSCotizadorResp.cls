//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class WSCotizadorResp {

    public class Meta {
        public List<Allowed_includes> allowed_includes {get;set;}
        public List<Allowed_includes> default_includes {get;set;}

        public Meta(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'allowed_includes') {
                            allowed_includes = arrayOfAllowed_includes(parser);
                        } else if (text == 'default_includes') {
                            default_includes = arrayOfAllowed_includes(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Allowed_includes {

        public Allowed_includes(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        {
                            System.debug(LoggingLevel.WARN, 'Allowed_includes consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public Data data {get;set;}
    public Meta meta {get;set;}

    public WSCotizadorResp(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'data') {
                        data = new Data(parser);
                    } else if (text == 'meta') {
                        meta = new Meta(parser);
                    } else {
                        System.debug(LoggingLevel.WARN, 'WSCotizadorResp consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }

    public class Data {
		public String id {get;set;}
        public String nroCotizacion {get;set;}
        public Double precioTitular {get;set;}
        public Double precioConyuge {get;set;}
        public Double precioPrimerHijoMenor21 {get;set;}
        public Double precioSegundoHijoMenor21 {get;set;}
        public Double precioTercerHijoOMasMenores21 {get;set;}
        public Double precioHijosEntre21y25 {get;set;}
        public Double precioTotal {get;set;}
        public Integer deduccionAportes {get;set;}
        public Double deduccionAportesMonotributo {get;set;}
        public Double bonificacionEspecial6Meses {get;set;}
        public Double descuentoPorPagoDebitoCBU {get;set;}
        public Double descuentoPorPagoTarjeta {get;set;}
        public Double diferenciaAPagar {get;set;}
        public Integer totalCapitas {get;set;}
        public String idPersona {get;set;}
        public String capitalSocialCooperativo {get;set;}
        public Double descuentoZonal {get;set;}
        public Double bonificacionEspecialGrupoAfinidad {get;set;}
        public Double bonificacionGrupoPotencialidad {get; set;}

        public Data(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'nroCotizacion') {
                            nroCotizacion = parser.getText();
                        } else if (text == 'precioTitular') {
                            precioTitular = parser.getDoubleValue();
                        } else if (text == 'precioConyuge') {
                            precioConyuge = parser.getDoubleValue();
                        } else if (text == 'precioPrimerHijoMenor21') {
                            precioPrimerHijoMenor21 = parser.getDoubleValue();
                        } else if (text == 'precioSegundoHijoMenor21') {
                            precioSegundoHijoMenor21 = parser.getDoubleValue();
                        } else if (text == 'precioTercerHijoOMasMenores21') {
                            precioTercerHijoOMasMenores21 = parser.getDoubleValue();
                        } else if (text == 'precioHijosEntre21y25') {
                            precioHijosEntre21y25 = parser.getDoubleValue();
                        } else if (text == 'precioTotal') {
                            precioTotal = parser.getDoubleValue();
                        } else if (text == 'deduccionAportes') {
                            deduccionAportes = parser.getIntegerValue();
                        } else if (text == 'deduccionAportesMonotributo') {
                            deduccionAportesMonotributo = parser.getDoubleValue();
                        } else if (text == 'bonificacionEspecial6Meses') {
                            bonificacionEspecial6Meses = parser.getDoubleValue();
                        } else if (text == 'descuentoPorPagoDebitoCBU') {
                            descuentoPorPagoDebitoCBU = parser.getDoubleValue();
                        } else if (text == 'descuentoPorPagoTarjeta') {
                            descuentoPorPagoTarjeta = parser.getDoubleValue();
                        } else if (text == 'diferenciaAPagar') {
                            diferenciaAPagar = parser.getDoubleValue();
                        } else if (text == 'totalCapitas') {
                            totalCapitas = parser.getIntegerValue();
						} else if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'idPersona') {
                            idPersona = parser.getText();
                        } else if (text == 'capitalSocialCooperativo') {
                            capitalSocialCooperativo = parser.getText();
                        } else if (text == 'descuentoZonal') {
                            descuentoZonal = parser.getDoubleValue();
                        } else if (text == 'bonificacionEspecialGrupoAfinidad') {
                            bonificacionEspecialGrupoAfinidad = parser.getDoubleValue();
                        } else if (text == 'bonificacionGrupoPotencialidad') {
                            bonificacionGrupoPotencialidad = parser.getDoubleValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }


    public static WSCotizadorResp parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new WSCotizadorResp(parser);
    }

    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT ||
                    curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                    curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }








    private static List<Allowed_includes> arrayOfAllowed_includes(System.JSONParser p) {
        List<Allowed_includes> res = new List<Allowed_includes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Allowed_includes(p));
        }
        return res;
    }



}