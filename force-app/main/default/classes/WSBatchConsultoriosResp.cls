//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class WSBatchConsultoriosResp {

    public class Meta {
        public Integer current_page {get;set;}
        public Integer from_Z {get;set;} // in json: from
        public Integer last_page {get;set;}
        public String path {get;set;}
        public Integer per_page {get;set;}
        public Integer to {get;set;}
        public Integer total {get;set;}
        public List<Allowed_filters> allowed_filters {get;set;}
        public List<Allowed_filters> allowed_sorts {get;set;}
        public List<Allowed_filters> allowed_appends {get;set;}
        public List<Allowed_filters> allowed_fields {get;set;}
        public List<Allowed_filters> allowed_includes {get;set;}
        public List<Allowed_filters> default_includes {get;set;}
        public Optional_get_vars optional_get_vars {get;set;}

        public Meta(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'current_page') {
                            current_page = parser.getIntegerValue();
                        } else if (text == 'from') {
                            from_Z = parser.getIntegerValue();
                        } else if (text == 'last_page') {
                            last_page = parser.getIntegerValue();
                        } else if (text == 'path') {
                            path = parser.getText();
                        } else if (text == 'per_page') {
                            per_page = parser.getIntegerValue();
                        } else if (text == 'to') {
                            to = parser.getIntegerValue();
                        } else if (text == 'total') {
                            total = parser.getIntegerValue();
                        } else if (text == 'allowed_filters') {
                            allowed_filters = arrayOfAllowed_filters(parser);
                        } else if (text == 'allowed_sorts') {
                            allowed_sorts = arrayOfAllowed_filters(parser);
                        } else if (text == 'allowed_appends') {
                            allowed_appends = arrayOfAllowed_filters(parser);
                        } else if (text == 'allowed_fields') {
                            allowed_fields = arrayOfAllowed_filters(parser);
                        } else if (text == 'allowed_includes') {
                            allowed_includes = arrayOfAllowed_filters(parser);
                        } else if (text == 'default_includes') {
                            default_includes = arrayOfAllowed_filters(parser);
                        } else if (text == 'optional_get_vars') {
                            optional_get_vars = new Optional_get_vars(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Optional_get_vars {
        public List<Allowed_filters> sortBy {get;set;}
        public List<String> sortOrder {get;set;}

        public Optional_get_vars(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'sortBy') {
                            sortBy = arrayOfAllowed_filters(parser);
                        } else if (text == 'sortOrder') {
                            sortOrder = arrayOfString(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Optional_get_vars consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public List<Data> data {get;set;}
    public Links links {get;set;}
    public Meta meta {get;set;}

    public WSBatchConsultoriosResp(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'data') {
                        data = arrayOfData(parser);
                    } else if (text == 'links') {
                        links = new Links(parser);
                    } else if (text == 'meta') {
                        meta = new Meta(parser);
                    } else {
                        System.debug(LoggingLevel.WARN, 'WSBatchConsultoriosResp consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }

    public class Links {
        public String first {get;set;}
        public String last {get;set;}
        public String prev {get;set;}
        public String next {get;set;}

        public Links(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'first') {
                            first = parser.getText();
                        } else if (text == 'last') {
                            last = parser.getText();
                        } else if (text == 'prev') {
                            prev = parser.getText();
                        } else if (text == 'next') {
                            next = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Links consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Data {
        public String rn {get;set;}
        public String pres_efe_codigo {get;set;}
        public String secuencia {get;set;}
        public String nombre {get;set;}
        public String username {get;set;}
        public String principal {get;set;}
        public String fecha_vigencia {get;set;}
        public String estado {get;set;}
        public String descripcion {get;set;}
        public String consultorio_diabetes {get;set;}
        public String matri {get;set;}
        public String mail {get;set;}
        public String codigo_externo {get;set;}
        public String cod_pami {get;set;}
        public String fecha_desde_usr {get;set;}
        public String fecha_hasta_usr {get;set;}
        public String horario {get;set;}
        public String farmacias_leches {get;set;}
        public String tipo_matricula {get;set;}
        public String cuit {get;set;}
        public String cons_cia {get;set;}
        public String firma {get;set;}
        public String f_modif {get;set;}

        public Data(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'rn') {
                            rn = parser.getText();
                        } else if (text == 'pres_efe_codigo') {
                            pres_efe_codigo = parser.getText();
                        } else if (text == 'secuencia') {
                            secuencia = parser.getText();
                        } else if (text == 'nombre') {
                            nombre = parser.getText();
                        } else if (text == 'username') {
                            username = parser.getText();
                        } else if (text == 'principal') {
                            principal = parser.getText();
                        } else if (text == 'fecha_vigencia') {
                            fecha_vigencia = parser.getText();
                        } else if (text == 'estado') {
                            estado = parser.getText();
                        } else if (text == 'descripcion') {
                            descripcion = parser.getText();
                        } else if (text == 'consultorio_diabetes') {
                            consultorio_diabetes = parser.getText();
                        } else if (text == 'matri') {
                            matri = parser.getText();
                        } else if (text == 'mail') {
                            mail = parser.getText();
                        } else if (text == 'codigo_externo') {
                            codigo_externo = parser.getText();
                        } else if (text == 'cod_pami') {
                            cod_pami = parser.getText();
                        } else if (text == 'fecha_desde_usr') {
                            fecha_desde_usr = parser.getText();
                        } else if (text == 'fecha_hasta_usr') {
                            fecha_hasta_usr = parser.getText();
                        } else if (text == 'horario') {
                            horario = parser.getText();
                        } else if (text == 'farmacias_leches') {
                            farmacias_leches = parser.getText();
                        } else if (text == 'tipo_matricula') {
                            tipo_matricula = parser.getText();
                        } else if (text == 'cuit') {
                            cuit = parser.getText();
                        } else if (text == 'cons_cia') {
                            cons_cia = parser.getText();
                        } else if (text == 'firma') {
                            firma = parser.getText();
                        } else if (text == 'f_modif') {
                            f_modif = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Allowed_filters {

        public Allowed_filters(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        {
                            System.debug(LoggingLevel.WARN, 'Allowed_filters consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }


    public static WSBatchConsultoriosResp parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new WSBatchConsultoriosResp(parser);
    }

    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT ||
                    curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                    curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }




    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }






    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }




    private static List<Allowed_filters> arrayOfAllowed_filters(System.JSONParser p) {
        List<Allowed_filters> res = new List<Allowed_filters>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Allowed_filters(p));
        }
        return res;
    }



}