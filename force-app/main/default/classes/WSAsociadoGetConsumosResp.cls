//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class WSAsociadoGetConsumosResp {

	public class Meta {
		public Integer current_page {get;set;} 
		public Integer from_Z {get;set;} // in json: from
		public Integer last_page {get;set;} 
		public String path {get;set;} 
		public Integer per_page {get;set;} 
		public Integer to {get;set;} 
		public Integer total {get;set;} 
		public List<Allowed_filters> allowed_filters {get;set;} 
		public List<Allowed_filters> allowed_sorts {get;set;} 
		public List<Allowed_filters> allowed_appends {get;set;} 
		public List<Allowed_filters> allowed_fields {get;set;} 
		public List<Allowed_filters> allowed_includes {get;set;} 
		public List<Allowed_filters> default_includes {get;set;} 
		public Optional_get_vars optional_get_vars {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'current_page') {
							current_page = parser.getIntegerValue();
						} else if (text == 'from') {
							from_Z = parser.getIntegerValue();
						} else if (text == 'last_page') {
							last_page = parser.getIntegerValue();
						} else if (text == 'path') {
							path = parser.getText();
						} else if (text == 'per_page') {
							per_page = parser.getIntegerValue();
						} else if (text == 'to') {
							to = parser.getIntegerValue();
						} else if (text == 'total') {
							total = parser.getIntegerValue();
						} else if (text == 'allowed_filters') {
							allowed_filters = arrayOfAllowed_filters(parser);
						} else if (text == 'allowed_sorts') {
							allowed_sorts = arrayOfAllowed_filters(parser);
						} else if (text == 'allowed_appends') {
							allowed_appends = arrayOfAllowed_filters(parser);
						} else if (text == 'allowed_fields') {
							allowed_fields = arrayOfAllowed_filters(parser);
						} else if (text == 'allowed_includes') {
							allowed_includes = arrayOfAllowed_filters(parser);
						} else if (text == 'default_includes') {
							default_includes = arrayOfAllowed_filters(parser);
						} else if (text == 'optional_get_vars') {
							optional_get_vars = new Optional_get_vars(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Optional_get_vars {
		public List<Allowed_filters> sortBy {get;set;} 
		public List<String> sortOrder {get;set;} 

		public Optional_get_vars(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sortBy') {
							sortBy = arrayOfAllowed_filters(parser);
						} else if (text == 'sortOrder') {
							sortOrder = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Optional_get_vars consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Links {
		public String first {get;set;} 
		public String last {get;set;} 
		public String prev {get;set;} 
		public String next {get;set;} 

		public Links(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'first') {
							first = parser.getText();
						} else if (text == 'last') {
							last = parser.getText();
						} else if (text == 'prev') {
							prev = parser.getText();
						} else if (text == 'next') {
							next = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Links consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		// falta campo nro Interno
		public String rn {get;set;}
		@AuraEnabled public String fecha_prestacion {get;set;} 
		public String afi_afi_id {get;set;} 
		@AuraEnabled public String tipo {get;set;} 
		@AuraEnabled public String tipo_prestacion {get;set;} 
		public String diagnostico {get;set;} 
		public String nombre_diagnostico {get;set;} 
		@AuraEnabled public String cantidad {get;set;} 
		@AuraEnabled public String prestacion {get;set;} 
		@AuraEnabled public String desc_prestacion {get;set;} 
		public String reintegro {get;set;} 
		public String nro_autorizacion {get;set;} 
		public String hd {get;set;} 
		public String autorizacion {get;set;} 
		public String pieza {get;set;} 
		public String caras {get;set;} 
		public String vda_drv_estado_auditoria {get;set;} 
		public String nombre_estado {get;set;} 
		public String efector {get;set;} 
		public String efector_realizador {get;set;} 
		public String prescriptor {get;set;} 
		public String efector_prescriptor {get;set;} 
		public String presentado {get;set;} 
		public String importe {get;set;} 
		public String presentacion {get;set;} 
		public String nro_factura {get;set;} 
		public String lugar_realizacion {get;set;} 
		public String nro_caja_archivo {get;set;} 
		public String lote {get;set;} 
		public String renglones {get;set;} 
		public String pca_id {get;set;} 
		@AuraEnabled public String origen {get;set;} 
		@AuraEnabled public String total {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'rn') {
							rn = parser.getText();
						} else if (text == 'fecha_prestacion') {
							fecha_prestacion = parser.getText();
						} else if (text == 'afi_afi_id') {
							afi_afi_id = parser.getText();
						} else if (text == 'tipo') {
							tipo = parser.getText();
						} else if (text == 'tipo_prestacion') {
							tipo_prestacion = parser.getText();
						} else if (text == 'diagnostico') {
							diagnostico = parser.getText();
						} else if (text == 'nombre_diagnostico') {
							nombre_diagnostico = parser.getText();
						} else if (text == 'cantidad') {
							cantidad = parser.getText();
						} else if (text == 'prestacion') {
							prestacion = parser.getText();
						} else if (text == 'desc_prestacion') {
							desc_prestacion = parser.getText();
						} else if (text == 'reintegro') {
							reintegro = parser.getText();
						} else if (text == 'nro_autorizacion') {
							nro_autorizacion = parser.getText();
						} else if (text == 'hd') {
							hd = parser.getText();
						} else if (text == 'autorizacion') {
							autorizacion = parser.getText();
						} else if (text == 'pieza') {
							pieza = parser.getText();
						} else if (text == 'caras') {
							caras = parser.getText();
						} else if (text == 'vda_drv_estado_auditoria') {
							vda_drv_estado_auditoria = parser.getText();
						} else if (text == 'nombre_estado') {
							nombre_estado = parser.getText();
						} else if (text == 'efector') {
							efector = parser.getText();
						} else if (text == 'efector_realizador') {
							efector_realizador = parser.getText();
						} else if (text == 'prescriptor') {
							prescriptor = parser.getText();
						} else if (text == 'efector_prescriptor') {
							efector_prescriptor = parser.getText();
						} else if (text == 'presentado') {
							presentado = parser.getText();
						} else if (text == 'importe') {
							importe = parser.getText();
						} else if (text == 'presentacion') {
							presentacion = parser.getText();
						} else if (text == 'nro_factura') {
							nro_factura = parser.getText();
						} else if (text == 'lugar_realizacion') {
							lugar_realizacion = parser.getText();
						} else if (text == 'nro_caja_archivo') {
							nro_caja_archivo = parser.getText();
						} else if (text == 'lote') {
							lote = parser.getText();
						} else if (text == 'renglones') {
							renglones = parser.getText();
						} else if (text == 'pca_id') {
							pca_id = parser.getText();
						} else if (text == 'origen') {
							origen = parser.getText();
						} else if (text == 'total') {
							total = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<Data> data {get;set;} 
	public Links links {get;set;} 
	public Meta meta {get;set;} 

	public WSAsociadoGetConsumosResp(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'data') {
						data = arrayOfData(parser);
					} else if (text == 'links') {
						links = new Links(parser);
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'WSAsociadoGetConsumosResp consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Allowed_filters {

		public Allowed_filters(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Allowed_filters consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
		
	public static WSAsociadoGetConsumosResp parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WSAsociadoGetConsumosResp(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	
    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }

    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }

    private static List<Allowed_filters> arrayOfAllowed_filters(System.JSONParser p) {
        List<Allowed_filters> res = new List<Allowed_filters>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Allowed_filters(p));
        }
        return res;
    }

}