//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class WSLoteOrdenReintegroResp {

	public class Meta {
		public List<Allowed_filters> allowed_filters {get;set;} 
		public List<Allowed_filters> allowed_sorts {get;set;} 
		public List<Allowed_filters> allowed_appends {get;set;} 
		public List<Allowed_filters> allowed_fields {get;set;} 
		public List<Allowed_filters> allowed_includes {get;set;} 
		public List<Allowed_filters> default_includes {get;set;} 
		public Optional_get_vars optional_get_vars {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'allowed_filters') {
							allowed_filters = arrayOfAllowed_filters(parser);
						} else if (text == 'allowed_sorts') {
							allowed_sorts = arrayOfAllowed_filters(parser);
						} else if (text == 'allowed_appends') {
							allowed_appends = arrayOfAllowed_filters(parser);
						} else if (text == 'allowed_fields') {
							allowed_fields = arrayOfAllowed_filters(parser);
						} else if (text == 'allowed_includes') {
							allowed_includes = arrayOfAllowed_filters(parser);
						} else if (text == 'default_includes') {
							default_includes = arrayOfAllowed_filters(parser);
						} else if (text == 'optional_get_vars') {
							optional_get_vars = new Optional_get_vars(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<Data> data {get;set;} 
	public Meta meta {get;set;} 

	public WSLoteOrdenReintegroResp(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'data') {
						data = arrayOfData(parser);
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'WSLoteOrdenReintegroResp consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Optional_get_vars {
		public List<Allowed_filters> sortBy {get;set;} 
		public List<String> sortOrder {get;set;} 

		public Optional_get_vars(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sortBy') {
							sortBy = arrayOfAllowed_filters(parser);
						} else if (text == 'sortOrder') {
							sortOrder = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Optional_get_vars consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Reintegros_X {
		public String lote {get;set;}
		public String lote_original {get;set;} 
		public String rei_id {get;set;} 
		public String orei_orei_id {get;set;} 
		public String fecha {get;set;} 
		public String del_os_codigo {get;set;} 
		public String afi_afi_id {get;set;} 
		public String codigo {get;set;} 
		public String asociado_nombre {get;set;} 
		public String em_em_id {get;set;} 
		public String efe_codigo_realizador {get;set;} 
		public String efe_codigo_prescriptor {get;set;} 
		public String fecha_prescripcion {get;set;} 
		public String diag_codigo {get;set;} 
		public String cobro_indeb {get;set;} 
		public String razon_social {get;set;} 
		public String cuit {get;set;} 
		public String tipo_comprobante {get;set;} 
		public String nro_comprobante {get;set;} 
		public String fecha_comprobante {get;set;} 
		public String importe {get;set;} 
		public String vda_drv_estado {get;set;} 
		public String nombre_estado {get;set;} 
		public String nro_sf {get;set;} 

		public Reintegros_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'lote') {
							lote = parser.getText();
						} else if (text == 'lote_original') {
							lote_original = parser.getText();
						} else if (text == 'rei_id') {
							rei_id = parser.getText();
						} else if (text == 'orei_orei_id') {
							orei_orei_id = parser.getText();
						} else if (text == 'fecha') {
							fecha = parser.getText();
						} else if (text == 'del_os_codigo') {
							del_os_codigo = parser.getText();
						} else if (text == 'afi_afi_id') {
							afi_afi_id = parser.getText();
						} else if (text == 'codigo') {
							codigo = parser.getText();
						} else if (text == 'asociado_nombre') {
							asociado_nombre = parser.getText();
						} else if (text == 'em_em_id') {
							em_em_id = parser.getText();
						} else if (text == 'efe_codigo_realizador') {
							efe_codigo_realizador = parser.getText();
						} else if (text == 'efe_codigo_prescriptor') {
							efe_codigo_prescriptor = parser.getText();
						} else if (text == 'fecha_prescripcion') {
							fecha_prescripcion = parser.getText();
						} else if (text == 'diag_codigo') {
							diag_codigo = parser.getText();
						} else if (text == 'cobro_indeb') {
							cobro_indeb = parser.getText();
						} else if (text == 'razon_social') {
							razon_social = parser.getText();
						} else if (text == 'cuit') {
							cuit = parser.getText();
						} else if (text == 'tipo_comprobante') {
							tipo_comprobante = parser.getText();
						} else if (text == 'nro_comprobante') {
							nro_comprobante = parser.getText();
						} else if (text == 'fecha_comprobante') {
							fecha_comprobante = parser.getText();
						} else if (text == 'importe') {
							importe = parser.getText();
						} else if (text == 'vda_drv_estado') {
							vda_drv_estado = parser.getText();
						} else if (text == 'nombre_estado') {
							nombre_estado = parser.getText();
						} else if (text == 'nro_sf') {
							nro_sf = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Reintegros_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Reintegros_Y {
		public String lote {get;set;} 
		public String lote_original {get;set;} 
		public String rei_id {get;set;} 
		public String orei_orei_id {get;set;} 
		public String fecha {get;set;} 
		public String del_os_codigo {get;set;} 
		public String afi_afi_id {get;set;} 
		public String codigo {get;set;} 
		public String asociado_nombre {get;set;} 
		public String em_em_id {get;set;} 
		public String efe_codigo_realizador {get;set;} 
		public String efe_codigo_prescriptor {get;set;} 
		public String fecha_prescripcion {get;set;} 
		public String diag_codigo {get;set;} 
		public String cobro_indeb {get;set;} 
		public String razon_social {get;set;} 
		public String cuit {get;set;} 
		public String tipo_comprobante {get;set;} 
		public String nro_comprobante {get;set;} 
		public String fecha_comprobante {get;set;} 
		public String importe {get;set;} 
		public String vda_drv_estado {get;set;} 
		public String nombre_estado {get;set;} 
		public String nro_sf {get;set;} 

		public Reintegros_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'lote') {
							lote = parser.getText();
						} else if (text == 'lote_original') {
							lote_original = parser.getText();
						} else if (text == 'rei_id') {
							rei_id = parser.getText();
						} else if (text == 'orei_orei_id') {
							orei_orei_id = parser.getText();
						} else if (text == 'fecha') {
							fecha = parser.getText();
						} else if (text == 'del_os_codigo') {
							del_os_codigo = parser.getText();
						} else if (text == 'afi_afi_id') {
							afi_afi_id = parser.getText();
						} else if (text == 'codigo') {
							codigo = parser.getText();
						} else if (text == 'asociado_nombre') {
							asociado_nombre = parser.getText();
						} else if (text == 'em_em_id') {
							em_em_id = parser.getText();
						} else if (text == 'efe_codigo_realizador') {
							efe_codigo_realizador = parser.getText();
						} else if (text == 'efe_codigo_prescriptor') {
							efe_codigo_prescriptor = parser.getText();
						} else if (text == 'fecha_prescripcion') {
							fecha_prescripcion = parser.getText();
						} else if (text == 'diag_codigo') {
							diag_codigo = parser.getText();
						} else if (text == 'cobro_indeb') {
							cobro_indeb = parser.getText();
						} else if (text == 'razon_social') {
							razon_social = parser.getText();
						} else if (text == 'cuit') {
							cuit = parser.getText();
						} else if (text == 'tipo_comprobante') {
							tipo_comprobante = parser.getText();
						} else if (text == 'nro_comprobante') {
							nro_comprobante = parser.getText();
						} else if (text == 'fecha_comprobante') {
							fecha_comprobante = parser.getText();
						} else if (text == 'importe') {
							importe = parser.getText();
						} else if (text == 'vda_drv_estado') {
							vda_drv_estado = parser.getText();
						} else if (text == 'nombre_estado') {
							nombre_estado = parser.getText();
						} else if (text == 'nro_sf') {
							nro_sf = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Reintegros_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Reintegros_Z {
		public String lote {get;set;} 
		public String lote_original {get;set;} 
		public String rei_id {get;set;} 
		public String orei_orei_id {get;set;} 
		public String fecha {get;set;} 
		public String del_os_codigo {get;set;} 
		public String afi_afi_id {get;set;} 
		public String codigo {get;set;} 
		public String asociado_nombre {get;set;} 
		public String em_em_id {get;set;} 
		public String efe_codigo_realizador {get;set;} 
		public String efe_codigo_prescriptor {get;set;} 
		public String fecha_prescripcion {get;set;} 
		public String diag_codigo {get;set;} 
		public String cobro_indeb {get;set;} 
		public String razon_social {get;set;} 
		public String cuit {get;set;} 
		public String tipo_comprobante {get;set;} 
		public String nro_comprobante {get;set;} 
		public String fecha_comprobante {get;set;} 
		public String importe {get;set;} 
		public String vda_drv_estado {get;set;} 
		public String nombre_estado {get;set;} 
		public String nro_sf {get;set;} 

		public Reintegros_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'lote') {
							lote = parser.getText();
						} else if (text == 'lote_original') {
							lote_original = parser.getText();
						} else if (text == 'rei_id') {
							rei_id = parser.getText();
						} else if (text == 'orei_orei_id') {
							orei_orei_id = parser.getText();
						} else if (text == 'fecha') {
							fecha = parser.getText();
						} else if (text == 'del_os_codigo') {
							del_os_codigo = parser.getText();
						} else if (text == 'afi_afi_id') {
							afi_afi_id = parser.getText();
						} else if (text == 'codigo') {
							codigo = parser.getText();
						} else if (text == 'asociado_nombre') {
							asociado_nombre = parser.getText();
						} else if (text == 'em_em_id') {
							em_em_id = parser.getText();
						} else if (text == 'efe_codigo_realizador') {
							efe_codigo_realizador = parser.getText();
						} else if (text == 'efe_codigo_prescriptor') {
							efe_codigo_prescriptor = parser.getText();
						} else if (text == 'fecha_prescripcion') {
							fecha_prescripcion = parser.getText();
						} else if (text == 'diag_codigo') {
							diag_codigo = parser.getText();
						} else if (text == 'cobro_indeb') {
							cobro_indeb = parser.getText();
						} else if (text == 'razon_social') {
							razon_social = parser.getText();
						} else if (text == 'cuit') {
							cuit = parser.getText();
						} else if (text == 'tipo_comprobante') {
							tipo_comprobante = parser.getText();
						} else if (text == 'nro_comprobante') {
							nro_comprobante = parser.getText();
						} else if (text == 'fecha_comprobante') {
							fecha_comprobante = parser.getText();
						} else if (text == 'importe') {
							importe = parser.getText();
						} else if (text == 'vda_drv_estado') {
							vda_drv_estado = parser.getText();
						} else if (text == 'nombre_estado') {
							nombre_estado = parser.getText();
						} else if (text == 'nro_sf') {
							nro_sf = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Reintegros_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Reintegros {
		@AuraEnabled public String lote {get;set;} 
		@AuraEnabled public String lote_original {get;set;} 
		@AuraEnabled public String rei_id {get;set;} 
		@AuraEnabled public String orei_orei_id {get;set;} 
		@AuraEnabled public String fecha {get;set;} 
		@AuraEnabled public String del_os_codigo {get;set;} 
		@AuraEnabled public String afi_afi_id {get;set;} 
		@AuraEnabled public String codigo {get;set;} 
		@AuraEnabled public String asociado_nombre {get;set;} 
		@AuraEnabled public String em_em_id {get;set;} 
		@AuraEnabled public String efe_codigo_realizador {get;set;} 
		@AuraEnabled public String efe_codigo_prescriptor {get;set;} 
		@AuraEnabled public String fecha_prescripcion {get;set;} 
		@AuraEnabled public String diag_codigo {get;set;} 
		@AuraEnabled public String cobro_indeb {get;set;} 
		@AuraEnabled public String razon_social {get;set;} 
		@AuraEnabled public String cuit {get;set;} 
		@AuraEnabled public String tipo_comprobante {get;set;} 
		@AuraEnabled public String nro_comprobante {get;set;} 
		@AuraEnabled public String fecha_comprobante {get;set;} 
		@AuraEnabled public String importe {get;set;} 
		@AuraEnabled public String vda_drv_estado {get;set;} 
		@AuraEnabled public String nombre_estado {get;set;} 
		@AuraEnabled public String nro_sf {get;set;} 

		public Reintegros(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'lote') {
							lote = parser.getText();
						} else if (text == 'lote_original') {
							lote_original = parser.getText();
						} else if (text == 'rei_id') {
							rei_id = parser.getText();
						} else if (text == 'orei_orei_id') {
							orei_orei_id = parser.getText();
						} else if (text == 'fecha') {
							fecha = parser.getText();
						} else if (text == 'del_os_codigo') {
							del_os_codigo = parser.getText();
						} else if (text == 'afi_afi_id') {
							afi_afi_id = parser.getText();
						} else if (text == 'codigo') {
							codigo = parser.getText();
						} else if (text == 'asociado_nombre') {
							asociado_nombre = parser.getText();
						} else if (text == 'em_em_id') {
							em_em_id = parser.getText();
						} else if (text == 'efe_codigo_realizador') {
							efe_codigo_realizador = parser.getText();
						} else if (text == 'efe_codigo_prescriptor') {
							efe_codigo_prescriptor = parser.getText();
						} else if (text == 'fecha_prescripcion') {
							fecha_prescripcion = parser.getText();
						} else if (text == 'diag_codigo') {
							diag_codigo = parser.getText();
						} else if (text == 'cobro_indeb') {
							cobro_indeb = parser.getText();
						} else if (text == 'razon_social') {
							razon_social = parser.getText();
						} else if (text == 'cuit') {
							cuit = parser.getText();
						} else if (text == 'tipo_comprobante') {
							tipo_comprobante = parser.getText();
						} else if (text == 'nro_comprobante') {
							nro_comprobante = parser.getText();
						} else if (text == 'fecha_comprobante') {
							fecha_comprobante = parser.getText();
						} else if (text == 'importe') {
							importe = parser.getText();
						} else if (text == 'vda_drv_estado') {
							vda_drv_estado = parser.getText();
						} else if (text == 'nombre_estado') {
							nombre_estado = parser.getText();
						} else if (text == 'nro_sf') {
							nro_sf = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Reintegros consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		@AuraEnabled public String lr_id {get;set;} 
		@AuraEnabled public String codigo {get;set;} 
		@AuraEnabled public String afi_nom {get;set;} 
		@AuraEnabled public String fecha {get;set;} 
		@AuraEnabled public String orei_id {get;set;} 
		@AuraEnabled public String orden_pago {get;set;} 
		@AuraEnabled public String estado {get;set;} 
		@AuraEnabled public String nombre_estado {get;set;} 
		@AuraEnabled public String importe {get;set;} 
		@AuraEnabled public String nombre_destinatario {get;set;} 
		@AuraEnabled public String est_financiero {get;set;} 
		@AuraEnabled public String estado_financiero {get;set;} 
		@AuraEnabled public List<Reintegros> reintegros {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'lr_id') {
							lr_id = parser.getText();
						} else if (text == 'codigo') {
							codigo = parser.getText();
						} else if (text == 'afi_nom') {
							afi_nom = parser.getText();
						} else if (text == 'fecha') {
							fecha = parser.getText();
						} else if (text == 'orei_id') {
							orei_id = parser.getText();
						} else if (text == 'orden_pago') {
							orden_pago = parser.getText();
						} else if (text == 'estado') {
							estado = parser.getText();
						} else if (text == 'nombre_estado') {
							nombre_estado = parser.getText();
						} else if (text == 'importe') {
							importe = parser.getText();
						} else if (text == 'nombre_destinatario') {
							nombre_destinatario = parser.getText();
						} else if (text == 'est_financiero') {
							est_financiero = parser.getText();
						} else if (text == 'estado_financiero') {
							estado_financiero = parser.getText();
						} else if (text == 'reintegros') {
							reintegros = arrayOfReintegros(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Allowed_filters {

		public Allowed_filters(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Allowed_filters consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static WSLoteOrdenReintegroResp parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WSLoteOrdenReintegroResp(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	


    private static List<Reintegros_X> arrayOfReintegros_X(System.JSONParser p) {
        List<Reintegros_X> res = new List<Reintegros_X>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Reintegros_X(p));
        }
        return res;
    }





    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }





    private static List<Reintegros> arrayOfReintegros(System.JSONParser p) {
        List<Reintegros> res = new List<Reintegros>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Reintegros(p));
        }
        return res;
    }




    private static List<Reintegros_Y> arrayOfReintegros_Y(System.JSONParser p) {
        List<Reintegros_Y> res = new List<Reintegros_Y>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Reintegros_Y(p));
        }
        return res;
    }


    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }



    private static List<Reintegros_Z> arrayOfReintegros_Z(System.JSONParser p) {
        List<Reintegros_Z> res = new List<Reintegros_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Reintegros_Z(p));
        }
        return res;
    }





    private static List<Allowed_filters> arrayOfAllowed_filters(System.JSONParser p) {
        List<Allowed_filters> res = new List<Allowed_filters>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Allowed_filters(p));
        }
        return res;
    }



}