//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class WSPrestacionActualizarImporteResp {

	public class Meta {
		public List<Allowed_includes> allowed_includes {get;set;} 
		public List<Allowed_includes> default_includes {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'allowed_includes') {
							allowed_includes = arrayOfAllowed_includes(parser);
						} else if (text == 'default_includes') {
							default_includes = arrayOfAllowed_includes(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Allowed_includes {

		public Allowed_includes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Allowed_includes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Boolean error {get;set;} 
	public List<Data> data {get;set;} 
	public Integer httpCode {get;set;} 
	public String message {get;set;} 
	public Meta meta {get;set;} 

	public WSPrestacionActualizarImporteResp(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'error') {
						error = parser.getBooleanValue();
					} else if (text == 'data') {
						data = arrayOfData(parser);
					} else if (text == 'httpCode') {
						httpCode = parser.getIntegerValue();
					} else if (text == 'message') {
						message = parser.getText();
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'WSPrestacionActualizarImportResp consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Data {
		public String apr_id {get;set;} 
		public String estado_prestacion {get;set;} 
		public String estado_descripcion {get;set;} 
		public String contexto {get;set;} 
		public String cantidad {get;set;} 
		public String prestacion {get;set;} 
		public String nombre_prestacion {get;set;} 
		public String tipo_prestacion {get;set;} 
		public String troquel {get;set;} 
		public String grupo_prestacion {get;set;} 
		public String pca_id {get;set;} 
		public String alerta {get;set;} 
		public String texto_aclarativo {get;set;} 
		public String importe_plan_sys {get;set;} 
		public String importe_plan_aud {get;set;} 
		public String importe_convenio_sys {get;set;} 
		public String importe_convenio_aud {get;set;} 
		public String importe_cargo_al_socio_sys {get;set;} 
		public String importe_cargo_al_socio_aud {get;set;} 
		public String importe_rein_sys {get;set;} 
		public String importe_rein_aud {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'apr_id') {
							apr_id = parser.getText();
						} else if (text == 'estado_prestacion') {
							estado_prestacion = parser.getText();
						} else if (text == 'estado_descripcion') {
							estado_descripcion = parser.getText();
						} else if (text == 'contexto') {
							contexto = parser.getText();
						} else if (text == 'cantidad') {
							cantidad = parser.getText();
						} else if (text == 'prestacion') {
							prestacion = parser.getText();
						} else if (text == 'nombre_prestacion') {
							nombre_prestacion = parser.getText();
						} else if (text == 'tipo_prestacion') {
							tipo_prestacion = parser.getText();
						} else if (text == 'troquel') {
							troquel = parser.getText();
						} else if (text == 'grupo_prestacion') {
							grupo_prestacion = parser.getText();
						} else if (text == 'pca_id') {
							pca_id = parser.getText();
						} else if (text == 'alerta') {
							alerta = parser.getText();
						} else if (text == 'texto_aclarativo') {
							texto_aclarativo = parser.getText();
						} else if (text == 'importe_plan_sys') {
							importe_plan_sys = parser.getText();
						} else if (text == 'importe_plan_aud') {
							importe_plan_aud = parser.getText();
						} else if (text == 'importe_convenio_sys') {
							importe_convenio_sys = parser.getText();
						} else if (text == 'importe_convenio_aud') {
							importe_convenio_aud = parser.getText();
						} else if (text == 'importe_cargo_al_socio_sys') {
							importe_cargo_al_socio_sys = parser.getText();
						} else if (text == 'importe_cargo_al_socio_aud') {
							importe_cargo_al_socio_aud = parser.getText();
						} else if (text == 'importe_rein_sys') {
							importe_rein_sys = parser.getText();
						} else if (text == 'importe_rein_aud') {
							importe_rein_aud = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static WSPrestacionActualizarImporteResp parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WSPrestacionActualizarImporteResp(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	





    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }


    private static List<Allowed_includes> arrayOfAllowed_includes(System.JSONParser p) {
        List<Allowed_includes> res = new List<Allowed_includes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Allowed_includes(p));
        }
        return res;
    }





}