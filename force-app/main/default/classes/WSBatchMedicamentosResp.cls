//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class WSBatchMedicamentosResp {

	public class Meta {
		public Integer current_page {get;set;} 
		public Integer from_Z {get;set;} // in json: from
		public Integer last_page {get;set;} 
		public String path {get;set;} 
		public Integer per_page {get;set;} 
		public Integer to {get;set;} 
		public Integer total {get;set;} 
		public List<Allowed_filters> allowed_filters {get;set;} 
		public List<Allowed_filters> allowed_sorts {get;set;} 
		public List<Allowed_filters> allowed_appends {get;set;} 
		public List<Allowed_filters> allowed_fields {get;set;} 
		public List<Allowed_filters> allowed_includes {get;set;} 
		public List<Allowed_filters> default_includes {get;set;} 
		//public Optional_get_vars optional_get_vars {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'current_page') {
							current_page = parser.getIntegerValue();
						} else if (text == 'from') {
							from_Z = parser.getIntegerValue();
						} else if (text == 'last_page') {
							last_page = parser.getIntegerValue();
						} else if (text == 'path') {
							path = parser.getText();
						} else if (text == 'per_page') {
							per_page = parser.getIntegerValue();
						} else if (text == 'to') {
							to = parser.getIntegerValue();
						} else if (text == 'total') {
							total = parser.getIntegerValue();
						} else if (text == 'allowed_filters') {
							allowed_filters = arrayOfAllowed_filters(parser);
						} else if (text == 'allowed_sorts') {
							allowed_sorts = arrayOfAllowed_filters(parser);
						} else if (text == 'allowed_appends') {
							allowed_appends = arrayOfAllowed_filters(parser);
						} else if (text == 'allowed_fields') {
							allowed_fields = arrayOfAllowed_filters(parser);
						} else if (text == 'allowed_includes') {
							allowed_includes = arrayOfAllowed_filters(parser);
						} else if (text == 'default_includes') {
							default_includes = arrayOfAllowed_filters(parser);
						//} else if (text == 'optional_get_vars') {
							//optional_get_vars = new Optional_get_vars(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	//public class Optional_get_vars {
		//public List<Allowed_filters> sortBy {get;set;} 
		//public List<String> sortOrder {get;set;} 
		//public PageSize pageSize {get;set;} 

		//public Optional_get_vars(JSONParser parser) {
			//while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				//if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					//String text = parser.getText();
					//if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						//if (text == 'sortBy') {
							//sortBy = arrayOfAllowed_filters(parser);
						//} else if (text == 'sortOrder') {
							//sortOrder = arrayOfString(parser);
						//} else if (text == 'pageSize') {
							//pageSize = new PageSize(parser);
						//} else {
							//System.debug(LoggingLevel.WARN, 'Optional_get_vars consuming unrecognized property: '+text);
							//consumeObject(parser);
						//}
					//}
				//}
			//}
		//}
	//}
	
	public List<Data> data {get;set;} 
	public Links links {get;set;} 
	public Meta meta {get;set;} 

	public WSBatchMedicamentosResp(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'data') {
						data = arrayOfData(parser);
					} else if (text == 'links') {
						links = new Links(parser);
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'WSBatchMedicamentosResp consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Links {
		public String first {get;set;} 
		public String last {get;set;} 
		public String prev {get;set;} 
		public String next {get;set;} 

		public Links(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'first') {
							first = parser.getText();
						} else if (text == 'last') {
							last = parser.getText();
						} else if (text == 'prev') {
							prev = parser.getText();
						} else if (text == 'next') {
							next = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Links consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public String rn {get;set;} 
		public String accion_terapeutica {get;set;} 
		public String codigo {get;set;} 
		public String nombre_producto {get;set;} 
		public String nombre_presentacion {get;set;} 
		public String grupo {get;set;} 
		public String nombre_grupo {get;set;} 
		public String tipo_cober {get;set;} 
		public String troquel {get;set;} 
		public String codigo_barras {get;set;} 
		public String codigo_externo_1 {get;set;} 
		public String codigo_externo_2 {get;set;} 
		public String codigo_externo_3 {get;set;} 
		public String medlab_codigo {get;set;} 
		public String tamano {get;set;} 
		public String descripcion {get;set;} 
		public String medat_nombre {get;set;} 
		public String nombre_forma {get;set;} 
		public String nombre_lab {get;set;} 
		public String nombre_monodroga {get;set;} 
		public String nombre_tam {get;set;} 
		public String nombre_unidad {get;set;} 
		public String nombre_tipouni {get;set;} 
		public String descrip_via {get;set;} 
		public String edad_maxima {get;set;} 
		public String edad_minima {get;set;} 
		public String estado_informado {get;set;} 
		public String estado_presentacion {get;set;} 
		public String estado_vigencia {get;set;} 
		public String excluye_vademecum {get;set;} 
		public String fecha_activacion {get;set;} 
		public String fecha_baja {get;set;} 
		public String fecha_estado {get;set;} 
		public String forma {get;set;} 
		public String grupo_terapeutico {get;set;} 
		public String max_unidades {get;set;} 
		public String med_bonificado {get;set;} 
		public String medlab_codigo_1 {get;set;} 
		public String monodroga {get;set;} 
		public String nacional {get;set;} 
		public String nombre_forma_1 {get;set;} 
		public String nombre_monodroga_1 {get;set;} 
		public String nombre_tam_1 {get;set;} 
		public String tipo_uni {get;set;} 
		public String observaciones {get;set;} 
		public String pmi_hijo {get;set;} 
		public String pmi_madre {get;set;} 
		public String potencia {get;set;} 
		public String precio_referencia {get;set;} 
		public String psicofarmaco {get;set;} 
		public String referencia_externa_2 {get;set;} 
		public String referencia_externa_3 {get;set;} 
		public String resol_310 {get;set;} 
		public String sexo_permitido {get;set;} 
		public String tama {get;set;} 
		public String unidades_divisibles {get;set;} 
		public String unidades_division {get;set;} 
		public String unidad {get;set;} 
		public String venta_libre {get;set;} 
		public String estupefaciente {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'rn') {
							rn = parser.getText();
						} else if (text == 'accion_terapeutica') {
							accion_terapeutica = parser.getText();
						} else if (text == 'codigo') {
							codigo = parser.getText();
						} else if (text == 'nombre_producto') {
							nombre_producto = parser.getText();
						} else if (text == 'nombre_presentacion') {
							nombre_presentacion = parser.getText();
						} else if (text == 'grupo') {
							grupo = parser.getText();
						} else if (text == 'nombre_grupo') {
							nombre_grupo = parser.getText();
						} else if (text == 'tipo_cober') {
							tipo_cober = parser.getText();
						} else if (text == 'troquel') {
							troquel = parser.getText();
						} else if (text == 'codigo_barras') {
							codigo_barras = parser.getText();
						} else if (text == 'codigo_externo_1') {
							codigo_externo_1 = parser.getText();
						} else if (text == 'codigo_externo_2') {
							codigo_externo_2 = parser.getText();
						} else if (text == 'codigo_externo_3') {
							codigo_externo_3 = parser.getText();
						} else if (text == 'medlab_codigo') {
							medlab_codigo = parser.getText();
						} else if (text == 'tamano') {
							tamano = parser.getText();
						} else if (text == 'descripcion') {
							descripcion = parser.getText();
						} else if (text == 'medat_nombre') {
							medat_nombre = parser.getText();
						} else if (text == 'nombre_forma') {
							nombre_forma = parser.getText();
						} else if (text == 'nombre_lab') {
							nombre_lab = parser.getText();
						} else if (text == 'nombre_monodroga') {
							nombre_monodroga = parser.getText();
						} else if (text == 'nombre_tam') {
							nombre_tam = parser.getText();
						} else if (text == 'nombre_unidad') {
							nombre_unidad = parser.getText();
						} else if (text == 'nombre_tipouni') {
							nombre_tipouni = parser.getText();
						} else if (text == 'descrip_via') {
							descrip_via = parser.getText();
						} else if (text == 'edad_maxima') {
							edad_maxima = parser.getText();
						} else if (text == 'edad_minima') {
							edad_minima = parser.getText();
						} else if (text == 'estado_informado') {
							estado_informado = parser.getText();
						} else if (text == 'estado_presentacion') {
							estado_presentacion = parser.getText();
						} else if (text == 'estado_vigencia') {
							estado_vigencia = parser.getText();
						} else if (text == 'excluye_vademecum') {
							excluye_vademecum = parser.getText();
						} else if (text == 'fecha_activacion') {
							fecha_activacion = parser.getText();
						} else if (text == 'fecha_baja') {
							fecha_baja = parser.getText();
						} else if (text == 'fecha_estado') {
							fecha_estado = parser.getText();
						} else if (text == 'forma') {
							forma = parser.getText();
						} else if (text == 'grupo_terapeutico') {
							grupo_terapeutico = parser.getText();
						} else if (text == 'max_unidades') {
							max_unidades = parser.getText();
						} else if (text == 'med_bonificado') {
							med_bonificado = parser.getText();
						} else if (text == 'medlab_codigo_1') {
							medlab_codigo_1 = parser.getText();
						} else if (text == 'monodroga') {
							monodroga = parser.getText();
						} else if (text == 'nacional') {
							nacional = parser.getText();
						} else if (text == 'nombre_forma_1') {
							nombre_forma_1 = parser.getText();
						} else if (text == 'nombre_monodroga_1') {
							nombre_monodroga_1 = parser.getText();
						} else if (text == 'nombre_tam_1') {
							nombre_tam_1 = parser.getText();
						} else if (text == 'tipo_uni') {
							tipo_uni = parser.getText();
						} else if (text == 'observaciones') {
							observaciones = parser.getText();
						} else if (text == 'pmi_hijo') {
							pmi_hijo = parser.getText();
						} else if (text == 'pmi_madre') {
							pmi_madre = parser.getText();
						} else if (text == 'potencia') {
							potencia = parser.getText();
						} else if (text == 'precio_referencia') {
							precio_referencia = parser.getText();
						} else if (text == 'psicofarmaco') {
							psicofarmaco = parser.getText();
						} else if (text == 'referencia_externa_2') {
							referencia_externa_2 = parser.getText();
						} else if (text == 'referencia_externa_3') {
							referencia_externa_3 = parser.getText();
						} else if (text == 'resol_310') {
							resol_310 = parser.getText();
						} else if (text == 'sexo_permitido') {
							sexo_permitido = parser.getText();
						} else if (text == 'tama') {
							tama = parser.getText();
						} else if (text == 'unidades_divisibles') {
							unidades_divisibles = parser.getText();
						} else if (text == 'unidades_division') {
							unidades_division = parser.getText();
						} else if (text == 'unidad') {
							unidad = parser.getText();
						} else if (text == 'venta_libre') {
							venta_libre = parser.getText();
						} else if (text == 'estupefaciente') {
							estupefaciente = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Allowed_filters {

		public Allowed_filters(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Allowed_filters consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static WSBatchMedicamentosResp parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WSBatchMedicamentosResp(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }


    //private static List<String> arrayOfString(System.JSONParser p) {
        //List<String> res = new List<String>();
        //if (p.getCurrentToken() == null) p.nextToken();
        //while (p.nextToken() != System.JSONToken.END_ARRAY) {
            //res.add(p.getText());
        //}
        //return res;
    //}











    private static List<Allowed_filters> arrayOfAllowed_filters(System.JSONParser p) {
        List<Allowed_filters> res = new List<Allowed_filters>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Allowed_filters(p));
        }
        return res;
    }



}