//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class WSEventoMedicoEnviarASSResp {

	public class Meta {
		public List<Allowed_includes> allowed_includes {get;set;} 
		public List<Allowed_includes> default_includes {get;set;}

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'allowed_includes') {
							allowed_includes = arrayOfAllowed_includes(parser);
						} else if (text == 'default_includes') {
							default_includes = arrayOfAllowed_includes(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Allowed_includes {

		public Allowed_includes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Allowed_includes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Prestaciones {
		public String apr_id {get;set;} 
		public String estado_prestacion {get;set;} 
		public String estado_descripcion {get;set;} 
		public String contexto {get;set;} 
		public String cantidad {get;set;} 
		public String prestacion {get;set;} 
		public String nombre_prestacion {get;set;} 
		public String tipo_prestacion {get;set;} 
		public String troquel {get;set;} 
		public String grupo_prestacion {get;set;} 
		public String pca_id {get;set;} 
		public String alerta {get;set;} 
		public String texto_aclarativo {get;set;} 
		public List<Alertas> alertas {get;set;} 

		public Prestaciones(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'apr_id') {
							apr_id = parser.getText();
						} else if (text == 'estado_prestacion') {
							estado_prestacion = parser.getText();
						} else if (text == 'estado_descripcion') {
							estado_descripcion = parser.getText();
						} else if (text == 'contexto') {
							contexto = parser.getText();
						} else if (text == 'cantidad') {
							cantidad = parser.getText();
						} else if (text == 'prestacion') {
							prestacion = parser.getText();
						} else if (text == 'nombre_prestacion') {
							nombre_prestacion = parser.getText();
						} else if (text == 'tipo_prestacion') {
							tipo_prestacion = parser.getText();
						} else if (text == 'troquel') {
							troquel = parser.getText();
						} else if (text == 'grupo_prestacion') {
							grupo_prestacion = parser.getText();
						} else if (text == 'pca_id') {
							pca_id = parser.getText();
						} else if (text == 'alerta') {
							alerta = parser.getText();
						} else if (text == 'texto_aclarativo') {
							texto_aclarativo = parser.getText();
						} else if (text == 'alertas') {
							alertas = arrayOfAlertas(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Prestaciones consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Segmento {
		public String em_em_id {get;set;}
		public String sem_id {get;set;}
		public String fecha {get;set;}
		public String solicitante {get;set;}
		public String nom_solicitante {get;set;}
		public String fecha_desde_tentativa {get;set;}
		public String fecha_hasta_tentativa {get;set;}
		public String cant_dias {get;set;}
		public String estado {get;set;}
		public String cod_auditor {get;set;}
		public String ape_auditor {get;set;}
		public String nom_auditor {get;set;}
		public String fecha_real_desde {get;set;}
		public String fecha_real_hasta {get;set;}
		public String orig_fecha_real {get;set;}
		public String cod_audito2 {get;set;}
		public String ape_auditor2 {get;set;}
		public String nom_auditor2 {get;set;}
		public String prestador {get;set;}
		public String pres_nombre {get;set;}
		public String presentacion {get;set;}
		public String lote {get;set;}
		public String obs {get;set;}

		public Segmento(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'em_em_id') {
							em_em_id = parser.getText();
						} else if (text == 'sem_id') {
							sem_id = parser.getText();
						} else if (text == 'fecha') {
							fecha = parser.getText();
						} else if (text == 'solicitante') {
							solicitante = parser.getText();
						} else if (text == 'nom_solicitante') {
							nom_solicitante = parser.getText();
						} else if (text == 'fecha_desde_tentativa') {
							fecha_desde_tentativa = parser.getText();
						} else if (text == 'fecha_hasta_tentativa') {
							fecha_hasta_tentativa = parser.getText();
						} else if (text == 'cant_dias') {
							cant_dias = parser.getText();
						} else if (text == 'estado') {
							estado = parser.getText();
						} else if (text == 'cod_auditor') {
							cod_auditor = parser.getText();
						} else if (text == 'ape_auditor') {
							ape_auditor = parser.getText();
						} else if (text == 'nom_auditor') {
							nom_auditor = parser.getText();
						} else if (text == 'fecha_real_desde') {
							fecha_real_desde = parser.getText();
						} else if (text == 'fecha_real_hasta') {
							fecha_real_hasta = parser.getText();
						} else if (text == 'orig_fecha_real') {
							orig_fecha_real = parser.getText();
						} else if (text == 'cod_audito2') {
							cod_audito2 = parser.getText();
						} else if (text == 'ape_auditor2') {
							ape_auditor2 = parser.getText();
						} else if (text == 'nom_auditor2') {
							nom_auditor2 = parser.getText();
						} else if (text == 'prestador') {
							prestador = parser.getText();
						} else if (text == 'pres_nombre') {
							pres_nombre = parser.getText();
						} else if (text == 'presentacion') {
							presentacion = parser.getText();
						} else if (text == 'lote') {
							lote = parser.getText();
						} else if (text == 'obs') {
							obs = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Segmento consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Em {
		public String em_id {get;set;} 
		public String fecha_inicio {get;set;} 
		public String estado {get;set;} 
		public String emitido {get;set;} 
		public String alerta {get;set;} 
		public String fecha_emision {get;set;}
		public String efe_codigo_lugar {get;set;} 
		public String cons_lugar {get;set;} 
		public String nom_lugar {get;set;} 
		public String nom_cons {get;set;} 
		public String efe_codigo_resp {get;set;} 
		public String nom_resp {get;set;} 
		public String efe_codigo_solic {get;set;} 
		public String nom_solic {get;set;} 
		public String tem_codigo {get;set;} 
		public String nom_tipo {get;set;} 
		public String contexto {get;set;} 
		public String de_seguimiento {get;set;} 
		public String recupero {get;set;} 
		public String diferido {get;set;} 
		public String suspendido {get;set;} 
		public String fec_vto_certif {get;set;} 
		public String cod_motivo {get;set;} 
		public String nom_motivo {get;set;} 
		public String mail {get;set;} 
		public String diag_codigo {get;set;} 
		public String diag_nombre {get;set;} 
		public String complicaciones {get;set;} 
		public String grup_pres {get;set;} 
		public String gpres_nombre {get;set;} 
		public String nro_prestacion {get;set;} 
		public String nom_prestacion {get;set;} 
		public String aut_previa {get;set;} 
		public String feem_codigo {get;set;} 
		public String feem_nombre {get;set;} 
		public String domi_entrega {get;set;} 
		public String agenia {get;set;} 
		public String otro_domi {get;set;} 
		public String via_entrega {get;set;} 
		public String domicilio {get;set;} 
		public String em_de_seguimiento {get;set;} 
		public String tipo_seg {get;set;} 
		public String nom_tipo_seg {get;set;} 
		public String estado_seg {get;set;} 
		public String desc_seg {get;set;} 
		public String cod_regla {get;set;} 
		public String nom_regla {get;set;} 
		public String sistema {get;set;} 
		public String descr_em {get;set;} 
		public String nom_delegacion {get;set;} 
		public String obs_em {get;set;} 
		public String afi_afi_id {get;set;} 
		public String apr_apr_id {get;set;} 
		public String check_mat {get;set;} 
		public String check_presu {get;set;} 
		public String importe_presu {get;set;} 
		public String nro_sf {get;set;}
		public List<Segmento> segmento {get;set;}
		public List<Ap> ap {get;set;} 

		public Em(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'em_id') {
							em_id = parser.getText();
						} else if (text == 'fecha_inicio') {
							fecha_inicio = parser.getText();
						} else if (text == 'estado') {
							estado = parser.getText();
						} else if (text == 'emitido') {
							emitido = parser.getText();
						} else if (text == 'alerta') {
							alerta = parser.getText();
						} else if (text == 'fecha_emision') {
							fecha_emision = parser.getText();
						} else if (text == 'efe_codigo_lugar') {
							efe_codigo_lugar = parser.getText();
						} else if (text == 'cons_lugar') {
							cons_lugar = parser.getText();
						} else if (text == 'nom_lugar') {
							nom_lugar = parser.getText();
						} else if (text == 'nom_cons') {
							nom_cons = parser.getText();
						} else if (text == 'efe_codigo_resp') {
							efe_codigo_resp = parser.getText();
						} else if (text == 'nom_resp') {
							nom_resp = parser.getText();
						} else if (text == 'efe_codigo_solic') {
							efe_codigo_solic = parser.getText();
						} else if (text == 'nom_solic') {
							nom_solic = parser.getText();
						} else if (text == 'tem_codigo') {
							tem_codigo = parser.getText();
						} else if (text == 'nom_tipo') {
							nom_tipo = parser.getText();
						} else if (text == 'contexto') {
							contexto = parser.getText();
						} else if (text == 'de_seguimiento') {
							de_seguimiento = parser.getText();
						} else if (text == 'recupero') {
							recupero = parser.getText();
						} else if (text == 'diferido') {
							diferido = parser.getText();
						} else if (text == 'suspendido') {
							suspendido = parser.getText();
						} else if (text == 'fec_vto_certif') {
							fec_vto_certif = parser.getText();
						} else if (text == 'cod_motivo') {
							cod_motivo = parser.getText();
						} else if (text == 'nom_motivo') {
							nom_motivo = parser.getText();
						} else if (text == 'mail') {
							mail = parser.getText();
						} else if (text == 'diag_codigo') {
							diag_codigo = parser.getText();
						} else if (text == 'diag_nombre') {
							diag_nombre = parser.getText();
						} else if (text == 'complicaciones') {
							complicaciones = parser.getText();
						} else if (text == 'grup_pres') {
							grup_pres = parser.getText();
						} else if (text == 'gpres_nombre') {
							gpres_nombre = parser.getText();
						} else if (text == 'nro_prestacion') {
							nro_prestacion = parser.getText();
						} else if (text == 'nom_prestacion') {
							nom_prestacion = parser.getText();
						} else if (text == 'aut_previa') {
							aut_previa = parser.getText();
						} else if (text == 'feem_codigo') {
							feem_codigo = parser.getText();
						} else if (text == 'feem_nombre') {
							feem_nombre = parser.getText();
						} else if (text == 'domi_entrega') {
							domi_entrega = parser.getText();
						} else if (text == 'agenia') {
							agenia = parser.getText();
						} else if (text == 'otro_domi') {
							otro_domi = parser.getText();
						} else if (text == 'via_entrega') {
							via_entrega = parser.getText();
						} else if (text == 'domicilio') {
							domicilio = parser.getText();
						} else if (text == 'em_de_seguimiento') {
							em_de_seguimiento = parser.getText();
						} else if (text == 'tipo_seg') {
							tipo_seg = parser.getText();
						} else if (text == 'nom_tipo_seg') {
							nom_tipo_seg = parser.getText();
						} else if (text == 'estado_seg') {
							estado_seg = parser.getText();
						} else if (text == 'desc_seg') {
							desc_seg = parser.getText();
						} else if (text == 'cod_regla') {
							cod_regla = parser.getText();
						} else if (text == 'nom_regla') {
							nom_regla = parser.getText();
						} else if (text == 'sistema') {
							sistema = parser.getText();
						} else if (text == 'descr_em') {
							descr_em = parser.getText();
						} else if (text == 'nom_delegacion') {
							nom_delegacion = parser.getText();
						} else if (text == 'obs_em') {
							obs_em = parser.getText();
						} else if (text == 'afi_afi_id') {
							afi_afi_id = parser.getText();
						} else if (text == 'apr_apr_id') {
							apr_apr_id = parser.getText();
						} else if (text == 'check_mat') {
							check_mat = parser.getText();
						} else if (text == 'check_presu') {
							check_presu = parser.getText();
						} else if (text == 'importe_presu') {
							importe_presu = parser.getText();
						} else if (text == 'nro_sf') {
							nro_sf = parser.getText();
						} else if (text == 'segmento') {
							segmento = arrayOfSegmento(parser);
						} else if (text == 'ap') {
							ap = arrayOfAp(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Em consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public Em em {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'em') {
							em = new Em(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Alertas {
		public String pca_pca_id {get;set;} 
		public String aca_id {get;set;} 
		public String cca_cca_id {get;set;} 
		public String control {get;set;} 
		public String nombre_control {get;set;} 
		public String funcion {get;set;} 
		public String texto_aclarativo {get;set;} 
		public String nivel_auditoria {get;set;} 
		public String nota_auditor {get;set;} 
		public String observaciones {get;set;} 
		public String fecha_generacion {get;set;} 
		public String fecha_lectura {get;set;} 
		public String auditor_lee {get;set;} 
		public String fecha_resolucion {get;set;} 
		public String auditor_resuelve {get;set;}
		public String estado_alerta {get;set;}
		public String descripcion_estado {get;set;}

		public Alertas(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'pca_pca_id') {
							pca_pca_id = parser.getText();
						} else if (text == 'aca_id') {
							aca_id = parser.getText();
						} else if (text == 'cca_cca_id') {
							cca_cca_id = parser.getText();
						} else if (text == 'control') {
							control = parser.getText();
						} else if (text == 'nombre_control') {
							nombre_control = parser.getText();
						} else if (text == 'funcion') {
							funcion = parser.getText();
						} else if (text == 'texto_aclarativo') {
							texto_aclarativo = parser.getText();
						} else if (text == 'nivel_auditoria') {
							nivel_auditoria = parser.getText();
						} else if (text == 'nota_auditor') {
							nota_auditor = parser.getText();
						} else if (text == 'observaciones') {
							observaciones = parser.getText();
						} else if (text == 'fecha_generacion') {
							fecha_generacion = parser.getText();
						} else if (text == 'fecha_lectura') {
							fecha_lectura = parser.getText();
						} else if (text == 'auditor_lee') {
							auditor_lee = parser.getText();
						} else if (text == 'fecha_resolucion') {
							fecha_resolucion = parser.getText();
						} else if (text == 'auditor_resuelve') {
							auditor_resuelve = parser.getText();
						} else if (text == 'estado_alerta') {
							estado_alerta = parser.getText();
						} else if (text == 'descripcion_estado') {
							descripcion_estado = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Alertas consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Data data {get;set;} 
	public Meta meta {get;set;} 

	public WSEventoMedicoEnviarASSResp(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'data') {
						data = new Data(parser);
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'WSEventoMedicoEnviarASSResp consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Ap {
		public String apr_id {get;set;} 
		public String fecha {get;set;} 
		public String conexion {get;set;} 
		public String nombre_conexion {get;set;} 
		public String delegacion {get;set;} 
		public String nombre_delegacion {get;set;} 
		public String fecha_probable {get;set;} 
		public String estado {get;set;} 
		public String nombre_estado {get;set;} 
		public String user_insert {get;set;} 
		public String fecha_insert {get;set;} 
		public String codigo_afiliado {get;set;} 
		public String apellidos_afiliado {get;set;} 
		public String nombres_afiliado {get;set;} 
		public String doc_afiliado {get;set;} 
		public String evento_medico {get;set;} 
		public String fecha_prescripcion {get;set;} 
		public String diagnostico {get;set;} 
		public String desc_diagnostico {get;set;} 
		public String prescriptor {get;set;} 
		public String nombre_prescriptor {get;set;} 
		public String prestador_dirige {get;set;} 
		public String nombre_prestador_dirige {get;set;} 
		public String prestador {get;set;} 
		public String nombre_prestador {get;set;} 
		public String consultorio {get;set;} 
		public String nombre_consultorio {get;set;} 
		public String observaciones {get;set;} 
		public String mail {get;set;} 
		public String otros_mail {get;set;} 
		public String aca_agencia {get;set;} 
		public String tran_alta {get;set;} 
		public String tran_anulacion {get;set;} 
		public String ref_externa {get;set;} 
		public String urgente {get;set;} 
		public String afi_id {get;set;} 
		public String nro_sf {get;set;} 
		public String nivel {get;set;} 
		public String clasificacion {get;set;} 
		public String tipo_ap_sf {get;set;} 
		public String ap_material {get;set;} 
		public String ap_presupuesto {get;set;}
		public String ap_anestesia {get;set;}
		public String imp_presu {get;set;}
		public String celula {get;set;}
		public String sla {get;set;}
		public List<Prestaciones> prestaciones {get;set;} 

		public Ap(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'apr_id') {
							apr_id = parser.getText();
						} else if (text == 'fecha') {
							fecha = parser.getText();
						} else if (text == 'conexion') {
							conexion = parser.getText();
						} else if (text == 'nombre_conexion') {
							nombre_conexion = parser.getText();
						} else if (text == 'delegacion') {
							delegacion = parser.getText();
						} else if (text == 'nombre_delegacion') {
							nombre_delegacion = parser.getText();
						} else if (text == 'fecha_probable') {
							fecha_probable = parser.getText();
						} else if (text == 'estado') {
							estado = parser.getText();
						} else if (text == 'nombre_estado') {
							nombre_estado = parser.getText();
						} else if (text == 'user_insert') {
							user_insert = parser.getText();
						} else if (text == 'fecha_insert') {
							fecha_insert = parser.getText();
						} else if (text == 'codigo_afiliado') {
							codigo_afiliado = parser.getText();
						} else if (text == 'apellidos_afiliado') {
							apellidos_afiliado = parser.getText();
						} else if (text == 'nombres_afiliado') {
							nombres_afiliado = parser.getText();
						} else if (text == 'doc_afiliado') {
							doc_afiliado = parser.getText();
						} else if (text == 'evento_medico') {
							evento_medico = parser.getText();
						} else if (text == 'fecha_prescripcion') {
							fecha_prescripcion = parser.getText();
						} else if (text == 'diagnostico') {
							diagnostico = parser.getText();
						} else if (text == 'desc_diagnostico') {
							desc_diagnostico = parser.getText();
						} else if (text == 'prescriptor') {
							prescriptor = parser.getText();
						} else if (text == 'nombre_prescriptor') {
							nombre_prescriptor = parser.getText();
						} else if (text == 'prestador_dirige') {
							prestador_dirige = parser.getText();
						} else if (text == 'nombre_prestador_dirige') {
							nombre_prestador_dirige = parser.getText();
						} else if (text == 'prestador') {
							prestador = parser.getText();
						} else if (text == 'nombre_prestador') {
							nombre_prestador = parser.getText();
						} else if (text == 'consultorio') {
							consultorio = parser.getText();
						} else if (text == 'nombre_consultorio') {
							nombre_consultorio = parser.getText();
						} else if (text == 'observaciones') {
							observaciones = parser.getText();
						} else if (text == 'mail') {
							mail = parser.getText();
						} else if (text == 'otros_mail') {
							otros_mail = parser.getText();
						} else if (text == 'aca_agencia') {
							aca_agencia = parser.getText();
						} else if (text == 'tran_alta') {
							tran_alta = parser.getText();
						} else if (text == 'tran_anulacion') {
							tran_anulacion = parser.getText();
						} else if (text == 'ref_externa') {
							ref_externa = parser.getText();
						} else if (text == 'urgente') {
							urgente = parser.getText();
						} else if (text == 'afi_id') {
							afi_id = parser.getText();
						} else if (text == 'nro_sf') {
							nro_sf = parser.getText();
						} else if (text == 'nivel') {
							nivel = parser.getText(); 
						} else if (text == 'clasificacion') {
							clasificacion = parser.getText();
						} else if (text == 'tipo_ap_sf') {
							tipo_ap_sf = parser.getText();
						} else if (text == 'ap_material') {
							ap_material = parser.getText();
						} else if (text == 'ap_presupuesto') {
							ap_presupuesto = parser.getText();
						} else if (text == 'ap_anestesia') {
							ap_anestesia = parser.getText();
						} else if (text == 'imp_presu') {
							imp_presu = parser.getText();
						} else if (text == 'celula') {
							celula = parser.getText();
						} else if (text == 'sla') {
							sla = parser.getText();
						} else if (text == 'prestaciones') {
							prestaciones = arrayOfPrestaciones(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Ap consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static WSEventoMedicoEnviarASSResp parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WSEventoMedicoEnviarASSResp(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



    private static List<Alertas> arrayOfAlertas(System.JSONParser p) {
        List<Alertas> res = new List<Alertas>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Alertas(p));
        }
        return res;
    }

	private static List<Segmento> arrayOfSegmento(System.JSONParser p) {
		List<Segmento> res = new List<Segmento>();
		if (p.getCurrentToken() == null) p.nextToken();
		while (p.nextToken() != System.JSONToken.END_ARRAY) {
			res.add(new Segmento(p));
		}
		return res;
	}

    private static List<Prestaciones> arrayOfPrestaciones(System.JSONParser p) {
        List<Prestaciones> res = new List<Prestaciones>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Prestaciones(p));
        }
        return res;
    }





    private static List<Ap> arrayOfAp(System.JSONParser p) {
        List<Ap> res = new List<Ap>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Ap(p));
        }
        return res;
    }





    private static List<Allowed_includes> arrayOfAllowed_includes(System.JSONParser p) {
        List<Allowed_includes> res = new List<Allowed_includes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Allowed_includes(p));
        }
        return res;
    }



}