//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class WSBatchEmpresaResp {

	public class Meta {
		public Integer current_page {get;set;} 
		public Integer from_Z {get;set;} // in json: from
		public Integer last_page {get;set;} 
		public String path {get;set;} 
		public Integer per_page {get;set;} 
		public Integer to {get;set;} 
		public Integer total {get;set;} 
		public List<String> allowed_filters {get;set;} 
		public List<Allowed_sorts> allowed_sorts {get;set;} 
		public List<Allowed_sorts> allowed_appends {get;set;} 
		public List<Allowed_sorts> allowed_fields {get;set;} 
		public List<Allowed_sorts> allowed_includes {get;set;} 
		public List<Allowed_sorts> default_includes {get;set;} 
		public Optional_get_vars optional_get_vars {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'current_page') {
							current_page = parser.getIntegerValue();
						} else if (text == 'from') {
							from_Z = parser.getIntegerValue();
						} else if (text == 'last_page') {
							last_page = parser.getIntegerValue();
						} else if (text == 'path') {
							path = parser.getText();
						} else if (text == 'per_page') {
							per_page = parser.getIntegerValue();
						} else if (text == 'to') {
							to = parser.getIntegerValue();
						} else if (text == 'total') {
							total = parser.getIntegerValue();
						} else if (text == 'allowed_filters') {
							allowed_filters = arrayOfString(parser);
						} else if (text == 'allowed_sorts') {
							allowed_sorts = arrayOfAllowed_sorts(parser);
						} else if (text == 'allowed_appends') {
							allowed_appends = arrayOfAllowed_sorts(parser);
						} else if (text == 'allowed_fields') {
							allowed_fields = arrayOfAllowed_sorts(parser);
						} else if (text == 'allowed_includes') {
							allowed_includes = arrayOfAllowed_sorts(parser);
						} else if (text == 'default_includes') {
							default_includes = arrayOfAllowed_sorts(parser);
						} else if (text == 'optional_get_vars') {
							optional_get_vars = new Optional_get_vars(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<Data> data {get;set;} 
	public Links links {get;set;} 
	public Meta meta {get;set;} 

	public WSBatchEmpresaResp(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'data') {
						data = arrayOfData(parser);
					} else if (text == 'links') {
						links = new Links(parser);
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'WSBatchEmpresaResp consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	
	public class Optional_get_vars {
		public List<Allowed_sorts> sortBy {get;set;} 
		public List<String> sortOrder {get;set;} 

		public Optional_get_vars(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sortBy') {
							sortBy = arrayOfAllowed_sorts(parser);
						} else if (text == 'sortOrder') {
							sortOrder = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Optional_get_vars consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Links {
		public String first {get;set;} 
		public String last {get;set;} 
		public String prev {get;set;} 
		public String next {get;set;} 

		public Links(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'first') {
							first = parser.getText();
						} else if (text == 'last') {
							last = parser.getText();
						} else if (text == 'prev') {
							prev = parser.getText();
						} else if (text == 'next') {
							next = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Links consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public String rn {get;set;} 
		public String numero_solicitud {get;set;} 
		public String fecha_presentacion {get;set;} 
		public String agencia {get;set;} 
		public String estado_solicitud {get;set;} 
		public String codigo_motivo {get;set;} 
		public String descripcion_motivo {get;set;} 
		public String codigo_empresa {get;set;} 
		public String razon_social {get;set;} 
		public String minimo_grupos {get;set;} 
		public String maximo_grupos {get;set;} 
		public String limite_edad {get;set;} 
		public String porcentaje_limite_edad {get;set;} 
		public String canje {get;set;} 
		public String porcentaje_canje {get;set;} 
		public String importe_canje {get;set;} 
		public String afiliados_sujetos_facturacion {get;set;} 
		public String identificacion_afiliados {get;set;} 
		public String solicitudes_afiliado_auditoria {get;set;} 
		public String grupos {get;set;} 
		public String tipo_sol_alta_masiva {get;set;} 
		public String tipo_sol_alta_masiva_desc {get;set;} 
		public String mot_sol_alta_masiva {get;set;} 
		public String mot_sol_alta_masiva_desc {get;set;} 
		public String tipo_sol_baja_masiva {get;set;} 
		public String tipo_sol_baja_masiva_desc {get;set;} 
		public String mot_sol_baja_masiva {get;set;} 
		public String mot_sol_baja_masiva_desc {get;set;} 
		public String codigo_tipo_baja {get;set;} 
		public String descripcion_tipo_baja {get;set;} 
		public String codigo_agrupacion {get;set;} 
		public String descripcion_agrupacion {get;set;} 
		public String agrupaciones_permitidas {get;set;} 
		public String codigo_agrupacion1 {get;set;} 
		public String descripcion_agrupacion1 {get;set;} 
		public String agrupaciones_permitidas1 {get;set;} 
		public String codigo_agrupacion2 {get;set;} 
		public String descripcion_agrupacion2 {get;set;} 
		public String agrupaciones_permitidas2 {get;set;} 
		public String codigo_agrupacion3 {get;set;} 
		public String descripcion_agrupacion3 {get;set;} 
		public String agrupaciones_permitidas3 {get;set;} 
		public String codigo_agrupacion4 {get;set;} 
		public String descripcion_agrupacion4 {get;set;} 
		public String agrupaciones_permitidas4 {get;set;} 
		public String tipo_empresa {get;set;} 
		public String es_sujeto_facturacion {get;set;} 
		public String descripcion_empresa {get;set;} 
		public String cuit {get;set;} 
		public String estado_empresa {get;set;} 
		public String email {get;set;} 
		public String codigo_agrupacion_empresa {get;set;} 
		public String descripcion_agrupacion_empresa {get;set;} 
		public String codigo_grupo_empresarial {get;set;} 
		public String descripcion_grupo_empresarial {get;set;} 
		public String observaciones {get;set;} 
		public String fecha_registracion {get;set;} 
		public String f_modif {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'rn') {
							rn = parser.getText();
						} else if (text == 'numero_solicitud') {
							numero_solicitud = parser.getText();
						} else if (text == 'fecha_presentacion') {
							fecha_presentacion = parser.getText();
						} else if (text == 'agencia') {
							agencia = parser.getText();
						} else if (text == 'estado_solicitud') {
							estado_solicitud = parser.getText();
						} else if (text == 'codigo_motivo') {
							codigo_motivo = parser.getText();
						} else if (text == 'descripcion_motivo') {
							descripcion_motivo = parser.getText();
						} else if (text == 'codigo_empresa') {
							codigo_empresa = parser.getText();
						} else if (text == 'razon_social') {
							razon_social = parser.getText();
						} else if (text == 'minimo_grupos') {
							minimo_grupos = parser.getText();
						} else if (text == 'maximo_grupos') {
							maximo_grupos = parser.getText();
						} else if (text == 'limite_edad') {
							limite_edad = parser.getText();
						} else if (text == 'porcentaje_limite_edad') {
							porcentaje_limite_edad = parser.getText();
						} else if (text == 'canje') {
							canje = parser.getText();
						} else if (text == 'porcentaje_canje') {
							porcentaje_canje = parser.getText();
						} else if (text == 'importe_canje') {
							importe_canje = parser.getText();
						} else if (text == 'afiliados_sujetos_facturacion') {
							afiliados_sujetos_facturacion = parser.getText();
						} else if (text == 'identificacion_afiliados') {
							identificacion_afiliados = parser.getText();
						} else if (text == 'solicitudes_afiliado_auditoria') {
							solicitudes_afiliado_auditoria = parser.getText();
						} else if (text == 'grupos') {
							grupos = parser.getText();
						} else if (text == 'tipo_sol_alta_masiva') {
							tipo_sol_alta_masiva = parser.getText();
						} else if (text == 'tipo_sol_alta_masiva_desc') {
							tipo_sol_alta_masiva_desc = parser.getText();
						} else if (text == 'mot_sol_alta_masiva') {
							mot_sol_alta_masiva = parser.getText();
						} else if (text == 'mot_sol_alta_masiva_desc') {
							mot_sol_alta_masiva_desc = parser.getText();
						} else if (text == 'tipo_sol_baja_masiva') {
							tipo_sol_baja_masiva = parser.getText();
						} else if (text == 'tipo_sol_baja_masiva_desc') {
							tipo_sol_baja_masiva_desc = parser.getText();
						} else if (text == 'mot_sol_baja_masiva') {
							mot_sol_baja_masiva = parser.getText();
						} else if (text == 'mot_sol_baja_masiva_desc') {
							mot_sol_baja_masiva_desc = parser.getText();
						} else if (text == 'codigo_tipo_baja') {
							codigo_tipo_baja = parser.getText();
						} else if (text == 'descripcion_tipo_baja') {
							descripcion_tipo_baja = parser.getText();
						} else if (text == 'codigo_agrupacion') {
							codigo_agrupacion = parser.getText();
						} else if (text == 'descripcion_agrupacion') {
							descripcion_agrupacion = parser.getText();
						} else if (text == 'agrupaciones_permitidas') {
							agrupaciones_permitidas = parser.getText();
						} else if (text == 'codigo_agrupacion1') {
							codigo_agrupacion1 = parser.getText();
						} else if (text == 'descripcion_agrupacion1') {
							descripcion_agrupacion1 = parser.getText();
						} else if (text == 'agrupaciones_permitidas1') {
							agrupaciones_permitidas1 = parser.getText();
						} else if (text == 'codigo_agrupacion2') {
							codigo_agrupacion2 = parser.getText();
						} else if (text == 'descripcion_agrupacion2') {
							descripcion_agrupacion2 = parser.getText();
						} else if (text == 'agrupaciones_permitidas2') {
							agrupaciones_permitidas2 = parser.getText();
						} else if (text == 'codigo_agrupacion3') {
							codigo_agrupacion3 = parser.getText();
						} else if (text == 'descripcion_agrupacion3') {
							descripcion_agrupacion3 = parser.getText();
						} else if (text == 'agrupaciones_permitidas3') {
							agrupaciones_permitidas3 = parser.getText();
						} else if (text == 'codigo_agrupacion4') {
							codigo_agrupacion4 = parser.getText();
						} else if (text == 'descripcion_agrupacion4') {
							descripcion_agrupacion4 = parser.getText();
						} else if (text == 'agrupaciones_permitidas4') {
							agrupaciones_permitidas4 = parser.getText();
						} else if (text == 'tipo_empresa') {
							tipo_empresa = parser.getText();
						} else if (text == 'es_sujeto_facturacion') {
							es_sujeto_facturacion = parser.getText();
						} else if (text == 'descripcion_empresa') {
							descripcion_empresa = parser.getText();
						} else if (text == 'cuit') {
							cuit = parser.getText();
						} else if (text == 'estado_empresa') {
							estado_empresa = parser.getText();
						} else if (text == 'email') {
							email = parser.getText();
						} else if (text == 'codigo_agrupacion_empresa') {
							codigo_agrupacion_empresa = parser.getText();
						} else if (text == 'descripcion_agrupacion_empresa') {
							descripcion_agrupacion_empresa = parser.getText();
						} else if (text == 'codigo_grupo_empresarial') {
							codigo_grupo_empresarial = parser.getText();
						} else if (text == 'descripcion_grupo_empresarial') {
							descripcion_grupo_empresarial = parser.getText();
						} else if (text == 'observaciones') {
							observaciones = parser.getText();
						} else if (text == 'fecha_registracion') {
							fecha_registracion = parser.getText();
						} else if (text == 'f_modif') {
							f_modif = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Allowed_sorts {

		public Allowed_sorts(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Allowed_sorts consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static WSBatchEmpresaResp parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WSBatchEmpresaResp(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	


    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }


    private static List<Allowed_sorts> arrayOfAllowed_sorts(System.JSONParser p) {
        List<Allowed_sorts> res = new List<Allowed_sorts>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Allowed_sorts(p));
        }
        return res;
    }






    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }






}