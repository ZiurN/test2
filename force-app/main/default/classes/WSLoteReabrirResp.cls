//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class WSLoteReabrirResp {

	public class Lote {
		public Integer lr_id {get;set;} 
		public String estado {get;set;} 
		public String prei_id {get;set;} 
		public List<Procesos> procesos {get;set;} 

		public Lote(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'lr_id') {
							lr_id = parser.getIntegerValue();
						} else if (text == 'estado') {
							estado = parser.getText();
						} else if (text == 'prei_id') {
							prei_id = parser.getText();
						} else if (text == 'procesos') {
							procesos = arrayOfProcesos(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Lote consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Meta {
		public List<Logs> allowed_includes {get;set;} 
		public List<Logs> default_includes {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'allowed_includes') {
							allowed_includes = arrayOfLogs(parser);
						} else if (text == 'default_includes') {
							default_includes = arrayOfLogs(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Boolean error {get;set;} 
	public Data data {get;set;} 
	public Integer httpCode {get;set;} 
	public String message {get;set;} 
	public Meta meta {get;set;} 

	public WSLoteReabrirResp(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'error') {
						error = parser.getBooleanValue();
					} else if (text == 'data') {
						data = new Data(parser);
					} else if (text == 'httpCode') {
						httpCode = parser.getIntegerValue();
					} else if (text == 'message') {
						message = parser.getText();
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'WSLoteReabrirResp consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Procesos {
		public String prei_id {get;set;} 
		public String inicio {get;set;} 
		public String fin {get;set;} 
		public String lr_lr_id {get;set;} 
		public String vda_drv_tipo_proceso {get;set;} 
		public String nombre_proc {get;set;} 
		public List<Logs> logs {get;set;} 

		public Procesos(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'prei_id') {
							prei_id = parser.getText();
						} else if (text == 'inicio') {
							inicio = parser.getText();
						} else if (text == 'fin') {
							fin = parser.getText();
						} else if (text == 'lr_lr_id') {
							lr_lr_id = parser.getText();
						} else if (text == 'vda_drv_tipo_proceso') {
							vda_drv_tipo_proceso = parser.getText();
						} else if (text == 'nombre_proc') {
							nombre_proc = parser.getText();
						} else if (text == 'logs') {
							logs = arrayOfLogs(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Procesos consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public Lote lote {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'lote') {
							lote = new Lote(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Logs {

		public Logs(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Logs consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static WSLoteReabrirResp parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WSLoteReabrirResp(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



    private static List<Logs> arrayOfLogs(System.JSONParser p) {
        List<Logs> res = new List<Logs>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Logs(p));
        }
        return res;
    }






    private static List<Procesos> arrayOfProcesos(System.JSONParser p) {
        List<Procesos> res = new List<Procesos>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Procesos(p));
        }
        return res;
    }




}