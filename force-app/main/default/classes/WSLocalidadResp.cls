//
// Generated by WSLocalidadResp http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class WSLocalidadResp {

	public class Meta {
		public Integer current_page {get;set;} 
		public Integer from_Z {get;set;} // in json: from
		public Integer last_page {get;set;} 
		public String path {get;set;} 
		public Integer per_page {get;set;} 
		public Integer to {get;set;} 
		public Integer total {get;set;} 
		public List<String> allowed_filters {get;set;} 
		public List<String> allowed_sorts {get;set;} 
		public List<Allowed_appends> allowed_appends {get;set;} 
		public List<Allowed_appends> allowed_fields {get;set;} 
		public List<Allowed_appends> allowed_includes {get;set;} 
		public List<Allowed_appends> default_includes {get;set;} 
		public Optional_get_vars optional_get_vars {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'current_page') {
							current_page = parser.getIntegerValue();
						} else if (text == 'from') {
							from_Z = parser.getIntegerValue();
						} else if (text == 'last_page') {
							last_page = parser.getIntegerValue();
						} else if (text == 'path') {
							path = parser.getText();
						} else if (text == 'per_page') {
							per_page = parser.getIntegerValue();
						} else if (text == 'to') {
							to = parser.getIntegerValue();
						} else if (text == 'total') {
							total = parser.getIntegerValue();
						} else if (text == 'allowed_filters') {
							allowed_filters = arrayOfString(parser);
						} else if (text == 'allowed_sorts') {
							allowed_sorts = arrayOfString(parser);
						} else if (text == 'allowed_appends') {
							allowed_appends = arrayOfAllowed_appends(parser);
						} else if (text == 'allowed_fields') {
							allowed_fields = arrayOfAllowed_appends(parser);
						} else if (text == 'allowed_includes') {
							allowed_includes = arrayOfAllowed_appends(parser);
						} else if (text == 'default_includes') {
							default_includes = arrayOfAllowed_appends(parser);
						} else if (text == 'optional_get_vars') {
							optional_get_vars = new Optional_get_vars(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<Data> data {get;set;} 
	public Links links {get;set;} 
	public Meta meta {get;set;} 

	public WSLocalidadResp(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'data') {
						data = arrayOfData(parser);
					} else if (text == 'links') {
						links = new Links(parser);
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'WSLocalidadResp consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	
	public class Optional_get_vars {
		public List<String> sortBy {get;set;} 
		public List<String> sortOrder {get;set;} 

		public Optional_get_vars(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sortBy') {
							sortBy = arrayOfString(parser);
						} else if (text == 'sortOrder') {
							sortOrder = arrayOfString(parser);
						}  else {
							System.debug(LoggingLevel.WARN, 'Optional_get_vars consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Links {
		public String first {get;set;} 
		public String last {get;set;} 
		public String prev {get;set;} 
		public String next {get;set;} 

		public Links(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'first') {
							first = parser.getText();
						} else if (text == 'last') {
							last = parser.getText();
						} else if (text == 'prev') {
							prev = parser.getText();
						} else if (text == 'next') {
							next = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Links consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public String codigo_postal {get;set;} 
		public String loc_loc_id {get;set;} 
		public String localidad {get;set;} 
		public String pcia_codigo {get;set;} 
		public String zn_zona {get;set;} 
        public String or_zona_nombre {get;set;}
		public String or_zona {get;set;} 
		public String organizador {get;set;} 
		public String f_modif_loc {get;set;} 
		public String f_modif_zn {get;set;} 
		public String f_modif_or {get;set;}
		public String ciu_codigo {get;set;}

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'codigo_postal') {
							codigo_postal = parser.getText();
						} else if (text == 'loc_loc_id') {
							loc_loc_id = parser.getText();
						} else if (text == 'localidad') {
							localidad = parser.getText();
						} else if (text == 'pcia_codigo') {
							pcia_codigo = parser.getText();
						} else if (text == 'zn_zona') {
							zn_zona = parser.getText();
                        } else if (text == 'or_zona_nombre') {
							or_zona_nombre = parser.getText();
						} else if (text == 'or_zona') {
							or_zona = parser.getText();
						} else if (text == 'organizador') {
							organizador = parser.getText();
						} else if (text == 'f_modif_loc') {
							f_modif_loc = parser.getText();
						} else if (text == 'f_modif_zn') {
							f_modif_zn = parser.getText();
						} else if (text == 'f_modif_or') {
							f_modif_or = parser.getText();
						} else if (text == 'ciu_codigo') {
							ciu_codigo = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Allowed_appends {

		public Allowed_appends(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Allowed_appends consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static WSLocalidadResp parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WSLocalidadResp(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	




    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }







    private static List<Allowed_appends> arrayOfAllowed_appends(System.JSONParser p) {
        List<Allowed_appends> res = new List<Allowed_appends>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Allowed_appends(p));
        }
        return res;
    }



    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }


}