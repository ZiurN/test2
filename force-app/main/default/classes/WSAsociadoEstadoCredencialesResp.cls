//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class WSAsociadoEstadoCredencialesResp {

	public class Meta {
		public List<Available_includes> available_includes {get;set;} 
		public List<Available_includes> default_includes {get;set;} 
		public Optional_get_vars optional_get_vars {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'available_includes') {
							available_includes = arrayOfAvailable_includes(parser);
						} else if (text == 'default_includes') {
							default_includes = arrayOfAvailable_includes(parser);
						} else if (text == 'optional_get_vars') {
							optional_get_vars = new Optional_get_vars(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Optional_get_vars {
		public List<Available_includes> sortBy {get;set;} 
		public List<String> sortOrder {get;set;} 

		public Optional_get_vars(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sortBy') {
							sortBy = arrayOfAvailable_includes(parser);
						} else if (text == 'sortOrder') {
							sortOrder = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Optional_get_vars consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<Data> data {get;set;} 
	public Meta meta {get;set;} 

	public WSAsociadoEstadoCredencialesResp(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'data') {
						data = arrayOfData(parser);
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'WSAsociadoEstadoCredencialesResp consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Data {
		@AuraEnabled public String codigo {get;set;} 
		@AuraEnabled public String apellido_nombre {get;set;} 
		@AuraEnabled public String secuencia {get;set;} 
		@AuraEnabled public String fecha_emision {get;set;} 
		@AuraEnabled public String fecha_vigencia {get;set;} 
		@AuraEnabled public String fecha_baja {get;set;} 
		@AuraEnabled public String fecha_anulacion {get;set;} 
		@AuraEnabled public String id_oca {get;set;} 
		@AuraEnabled public String estado {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'codigo') {
							codigo = parser.getText();
						} else if (text == 'apellido_nombre') {
							apellido_nombre = parser.getText();
						} else if (text == 'secuencia') {
							secuencia = parser.getText();
						} else if (text == 'fecha_emision') {
							fecha_emision = parser.getText();
						} else if (text == 'fecha_vigencia') {
							fecha_vigencia = parser.getText();
						} else if (text == 'fecha_baja') {
							fecha_baja = parser.getText();
						} else if (text == 'fecha_anulacion') {
							fecha_anulacion = parser.getText();
						} else if (text == 'id_oca') {
							id_oca = parser.getText();
						} else if (text == 'estado') {
							estado = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Available_includes {

		public Available_includes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Available_includes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static WSAsociadoEstadoCredencialesResp parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WSAsociadoEstadoCredencialesResp(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



    private static List<Available_includes> arrayOfAvailable_includes(System.JSONParser p) {
        List<Available_includes> res = new List<Available_includes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Available_includes(p));
        }
        return res;
    }


    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }








    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }


}